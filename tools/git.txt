##############################################################################
# GIT CHEATSHEET (english Quick Reference) - by albertwang21 (created on 2019/09/16)
# Version: 1, Last Modified: 2019/09/16 18:00
# https://github.com/skywind3000/awesome-cheatsheets
##############################################################################


##############################################################################
#initialization
##############################################################################
git config --global "Your Name"
git config --global "Email Address"
git config --global credential.helper store   Save password (enter password every time/re-enter password)


##############################################################################
# initialization
##############################################################################
git init


##############################################################################
#Submit changes
##############################################################################
git add <file>
git add -u Stage all tracked files in the working directory for the staging area
git commit -m "descriptions"
git commit --amend Make changes to the content of the most recent commit.
git commit --amend --author "user_name <user_email>"Change the username and email for the most recent commit.


##############################################################################
# View status and compare
##############################################################################
git status                                 # View the current status of the repository
git status -s                             # View a short summary of the repository's status, with common file status abbreviations like A: Added, M: Modified, ?: Untracked, D: Deleted
git diff <file>                           # View the differences for a specific file between the working directory and the last committed version
git diff HEAD -- <file>                   # View the differences between the working directory and the latest version in the repository for a specific file
git diff --check <file>                   # Check for whitespace errors in the specified file (regex: ' \{1,\}$')
git diff --cached <file>                  # View the differences for a specific file that has been added (staged) for commit (indicated by green M)
git diff branch1 branch2 --stat           # View the statistics of the differences between two branches
git diff branch1 branch2 <file...>        # View the specific differences in files between two branches

##############################################################################
# View history versions and operations
##############################################################################
git log                                 # View the commit history
git reflog                             # View the reference log, which tracks reference updates
git log -n                             # View the recent n commit history
git log <branch_name> -n               # View the recent n commit history for a specific branch
git log --stat                         # View the file changes in each commit
git log --shortstat                    # Display a summary of file and line changes for each commit (e.g., "n files changed, n insertions(+), n deletions(-)")
git log --name-status                  # Show a list of added, modified, and deleted files for each commit
git log lhs_hash..rhs_hash              # Compare the changes between two commits (deletions and additions are relative to lhs, e.g., git log HEAD~2..HEAD == git log HEAD -3)
git log -p                              # View the content changes for each commit
git log -p -W                           # View the content changes for each commit and display context
git log origin/EI-1024 -1 --stat -p -W  # View detailed content of the previous change for the remote branch EI-1024
git log origin/master..dev --stat -p -W # View detailed content changes (modifications) of the local branch dev compared to the remote master branch

git log <branch_name> --oneline        # List commit history in one line format
git log <branch_name> --graph          # Display the commit history in a graphical format
git log <branch_name> --decorate       # Show related references in the commit history, such as tags, local remote branches, etc.
git log <branch_name> --oneline --graph --decorate  # Combine the above options for a tree-like display of history
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%ai(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit # Recommended alias format

Common options for git log --pretty=format (excerpt from progit_v2.1.9):
%H Commit object's full hash
%h Commit object's abbreviated hash
%T Tree object's full hash
%t Tree object's abbreviated hash
%P Parent object's full hash
%p Parent object's abbreviated hash
%an Author's name
%ae Author's email address
%ad Author's commit date (can be customized with the --date= option)
%ar Author's commit date displayed in relative time
%cn Committer's name
%ce Committer's email address
%cd Commit date
%cr Commit date displayed in relative time
%s Commit message

git log --since --after                # Show commits after a certain date or time
git log --until --before              # Show commits before a certain date or time
git --author                          # Show commits by a specific author
git --committer                       # Show commits by a specific committer (note: committer may not be the author)
git log -S [keyword]                  # Show commits that add or remove a specific keyword (useful in some cases over git log -p | grep [keyword])
git log origin/b3.3/master --author=yx-ren --since="2019-10-01" --before="2019-11-01"  # View commits by a specific author in the past month for a particular release version
git log origin/b3.0/master --author=some_leave --since="1 month ago"                  # View commits by a recently departed colleague in the past month
git log --since=1.weeks               # Show commits from the past week (useful for writing weekly reports)
git log --since=1.days                # Show commits from the past day (useful at the end of the day to review what you did)
git log --since="1 weeks 2 days 3 hours 40 minutes 50 seconds ago"  # Show commits from a specified time frame


##############################################################################
# Version rollback and forward
##############################################################################
git reset --hard HEAD^   # Roll back to the previous version (1 version back)
git reset --hard HEAD~5  # Roll back to the version 5 steps back
git reset --hard id      # Roll back to a specific version specified by its ID


##############################################################################
# Undoing Changes
##############################################################################
git checkout -- <file>     # Undo changes: Discard local changes in the working directory for a file not staged (not added or committed)
git restore <file>         # Undo changes: Discard local changes in the working directory for a file not staged (not added or committed)
git reset HEAD <file>      # Undo 'git add': Unstage a file that was previously added (staged) to the index but not yet committed
git reset --hard HEAD^     # Undo 'git commit': Roll back to the previous commit (use with caution, as it discards the commit)

##############################################################################
# Deletion and Restoration
##############################################################################
git rm/add <file>                       # Remove a file from the version control system and commit the change
git commit -m "remove <file>"           # Delete a file from the version control system (after manually deleting the file in the working directory) and commit the change
git checkout -- <file>                  # Restore a specific file from the version control system to the working directory
git restore <file>                      # Newer syntax for the same action as "git checkout -- <file" (introduced in Git 2.23)

##############################################################################
# Clean Untracked and Unignored Files or Folders in the Working Directory
# (e.g., temporary .swp, .patch files, etc.)
##############################################################################
git clean -i       # Interactive clean, not commonly used
git clean -n       # Dry run to see which files would be removed (doesn't actually remove them)
git clean -n -d    # Dry run to see which files and directories would be removed (doesn't actually remove them)
git clean -f       # Clean (remove) all untracked files
git clean -df      # Clean (remove) all untracked files and directories (commonly used, but ensure new files or directories are added before using, or they will also be forcibly deleted)

##############################################################################
# Link to a GitHub Remote Repository (Local to Remote)
##############################################################################
git remote add origin <remote address>  # Link the local repository to a remote repository as specified by the GitHub instructions
git remote rm origin                    # Remove an incorrect remote link
git push -u origin master               # First time pushing the local repository to the remote repository (perform this operation after each local commit)
git push origin master                  # Subsequent pushes of the local repository to the remote repository after commits
<remote address>:
    git@github.com:<username>/<repository>.git
    https://github.com/<username>/<repository>.git

##############################################################################
# Clone a GitHub Remote Repository (Remote to Local)
##############################################################################
git clone <remote address>               # Clone a remote repository to your local machine
    # Note: git protocol is faster but often blocked within corporate networks, while the https protocol is slower.

##############################################################################
# Branch Management: Create, Switch, View, Merge, Delete
##############################################################################
git branch <branch name>                 # Create a new branch named <branch name>
git checkout <branch name>               # Switch to an existing branch named <branch name>
git switch <branch name>                 # Switch to an existing branch named <branch name> (introduced in Git 2.23)
git checkout -b <branch name>            # Create and switch to a new branch named <branch name>
git switch -c <branch name>              # Create and switch to a new branch named <branch name>
git branch                               # View existing branches (* indicates the current branch)
git merge <branch name>                  # Merge <branch name> into the current branch (typically done on the master branch)
git merge --no-commit <branch name>      # Merge <branch name> into the current branch without committing the changes
git branch -d <branch name>              # Delete a branch
git branch -m oldbranchname newname      # Rename a branch

##############################################################################
# Resolve Merge Conflicts
##############################################################################
When a merge conflict occurs, edit the affected file manually to resolve the conflict. After resolving, use 'git add' to stage the changes and 'git commit' to complete the merge. Finally, delete the unnecessary branch.

Useful Git Log Options:
git log --graph --pretty=oneline --abbrev-commit
git log --graph


##############################################################################
# Branch Management: Preserve Branch Records after Deletion
##############################################################################
git merge --no-ff -m "descriptions" <branch name>


##############################################################################
# Development Workflow:
##############################################################################
master branch             For stable releases
dev branch                For ongoing development
<developer name> branch   For personal development (merge into dev when done, keep branch for further work)


##############################################################################
# Bug Branch Management (Create a Separate Branch for Bug Fixes)
##############################################################################
In software development, bugs are common. When you encounter a bug, create a temporary branch to fix it, merge the branch after fixing, then delete the temporary branch.

git stash                  Save the current work state (when in dev but need to fix a bug in master)
git stash pop              Restore the work state after switching to the dev branch (items in the stash are deleted)
git stash list             View the currently stored work states
git stash apply stash@{#}  Return to a specific work state (items in the stash are not deleted, use git stash drop)
git stash drop stash@{#}   Delete a specific work state
git cherry-pick <id>       After fixing a bug in master, copy the bug-fix process to the dev branch


##############################################################################
# Feature Branch Management (Create a Separate Branch for Adding New Features)
##############################################################################
In software development, new features are continually added. When adding a new feature, create a feature branch to develop it, merge when done, then delete the feature branch.

git branch -D <branch name>  Forcefully delete a branch (discard unmerged changes)


##############################################################################
# Collaboration and Branch Pushing
##############################################################################
User 1:
git remote [-v]                         View remote repository information (-v for detailed information)
git remote update origin --prune        Update branch list (update remote branch list)
git remote update origin -p             Update branch list (update remote branch list)
git push origin [master/dev/...]        Push a specific branch to the remote repository
User 2:
git clone <remote address>              Clone a repository locally (only clones the master branch)
git checkout -b dev origin/dev          Create a new local branch and link to the remote branch
git add/commit/push                     Add, commit, and push updates
User 1:
git add/commit/push                     Encounter an error during push (conflicts with updates from User 2)
git pull <remote> <branch>              Pull remote files (and resolve conflicts)
git branch --set-upstream-to=origin/<branch> <branch>  Establish a link between local and remote
git pull                               Fetch remote files (and resolve conflicts)
git commit/push                        Re-submit and push changes


##############################################################################
# Tag Management (Commonly Used for Version Control): View, Create, and Manipulate Tags
##############################################################################
git tag                                                    View tags
git show <tag name>                                        View a specific tag
git log --pretty=oneline --abbrev-commit --decorate=full   Display tags in the log
git tag <tag name>                                         Create a tag for the last commit
git tag <tag name> <commit id>                             Create a tag for a specific commit
git tag -a <tag name> -m "descriptions" <commit id>        Create an annotated tag for a commit
git tag -d <tag name>                                      Delete a local tag
git push origin <tag name>                                 Push a specific tag to the remote repository
git push origin --tags                                     Push all local tags to the remote repository
git push origin :refs/tags/<tag name>                      Delete a remote tag (remove local tag first)


##############################################################################
#rebase(换基)
Rebase
##############################################################################
# Rebase is commonly used for two main purposes in daily development: regularly rebasing on the master branch in a multi-person collaborative environment and compressing multiple commits on a specific branch.
git rebase master is often used in multi-person development. Each developer checks out their own branch from master, develops for a while, and before submitting to master, it's best to rebase to prevent conflicts. Even if there are conflicts, it's better to resolve them locally before forcing the commit. In the development process, try to keep the master branch clean and tidy.

For example:
The master branch has three commits: C1, C2, C3.
At some point, usr1 checks out a new branch from C3 of the master branch to develop support for IPv6 features on the server and submits C4, C5.
git checkout -b ipv6_support
...
git commit -m C4
...
git commit -m C5
At this point, the submission status is as follows:
      (origin/master branch)
             |
C1 <- C2 <- C3
             \
              \
               \
                C4 <- C5
                       |
                (ipv6_support branch)

A colleague, usr2, fixed a memory leak error on the master and submitted three commits, C6, C7, C8, and then pushed directly to origin/master (assuming no one else pushed new content to master during this period). The submission status is as follows:
                    (origin/usr2/fix_mem_leak branch)
                               |
C1 <- C2 <- C3 <- C6 <- C7 <- C8
             \                 |
              \         (origin/master branch)
               \
                C4 <- C5
                       |
                (ipv6_support branch)

If usr1 now wants to submit the IPv6 feature to master, when they push origin master directly, it will prompt that master needs to merge the ipv6_support branch. Although the changes made in C4 and C5 are completely independent of the changes in C6, C7, C8, Git will still fetch C5 and C8 commits and generate a new commit C9 (because the bases of the two branches are different), as shown in the following diagram:
C1 <- C2 <- C3 <- C6 <- C7 <- C8
             \                 \
              \                 \
               \                 \
                C4 <- C5 <------ C9

If it's to ensure the "cleanliness" of the master commit records or if a branch is not ready to be submitted but still needs more testing and development, and you don't want the branch to "deviate" too far from the originally checked out master branch (which can lead to more conflicts), you can consider (regularly) using rebase for rebase.
That is, as mentioned earlier, in multi-person collaborative development, regularly rebasing on the master is a good practice.
git checkout ipv6_support
git rebase master
The submission status is as follows:
            (origin/master origin/usr2/fix_mem_leak branch)
                               |
C1 <- C2 <- C3 <- C6 <- C7 <- C8
                                \
                                 \
                                  \
                                   C4' <- C5'
                                           |
                                    (ipv6_support branch)
This kind of rebase is functionally similar to creating multiple patches for all changes in a branch and applying them sequentially to a specified new base. At this point, submitting to master will not trigger a merge effect, and C4' and C5' will be directly submitted to master, i.e., can be fast-forwarded, while also ensuring the cleanliness of the master commit records.
(Note: Although the content of C4' and C5' is identical to C4 and C5, the bases are different, and the commit hash codes are completely different.)

git rebase --noto <branch_lhs> <branch_rhs> # Replay, used for rebasing commits in branch_lhs that are not in branch_rhs.
# The project status is as follows, where the numbers of Cn represent the order of submission.
# T1 Employee usr1 checks out a new branch from C2 (master branch) to develop a basic common component feature.
# T2 Employee usr1 finishes development and submits C3, then continues to develop server-related features on this branch (or checks out -b server) and submits C4.
# T3 The master branch is updated, and another colleague, usr2, submits C5 and C6 and pushes to origin master.
# T4 Employee usr1 switches back to the C3 common basic submission from the server branch and creates a new branch, client, for developing client-side features and submits C8, C9.
# T5 Employee usr1 switches back to the server branch from the client branch to continue developing server-side features and submits C10.
            (master branch)
                   |
C1 <- C2 <- C5 <- C6
         \
          \
           \
            C3 <- C4 <- C10
               \         |
                \ (server branch)
                 \
                  C8 <- C9
                         |
                  (client branch)

# At this point, the employee wants to merge the client-related functionality into the main branch and release it, but does not want to merge the changes in the server branch temporarily because they need more extensive testing. In this case, you can use the --onto option of the git rebase command to select the changes in the client branch that are not in the server branch (i.e., C8 and C9) and replay them on the master branch:

git rebase --noto client server
# The submission status is as follows:
# Note: C3', C8', C9' are identical in content to C3, C8, C9, but their hash IDs are completely different.
            (master branch)(client branch)
                   |            |
C1 <- C2 <- C5 <- C6 <- C8' <- C9'
         \
          \
           \
            C3 <- C4 <- C10
               \         |
                \ (server branch)
                 \
               [#####disable######]
               [  C8 <- C9        ]
               [         |        ]
               [  (client branch) ]

# Can be fast-forwarded
git checkout master
git merge client
# The branch status after submission is as follows:
                                (client branch)
                                       |
C1 <- C2 <- C5 <- C6 <- C3' <- C8' <- C9'
         \                             |
          \                     (master branch)
           \
            C3 <- C4 <- C10
                         |
                  (server branch)

git rebase -i HEAD~n Compress the current branch's n commits into a single commit, commonly, the first line is "pick," and the remaining n-1 lines are "squash."

git rebase --abort # If an error occurs during rebase, you can use this command to abort the entire rebase process.
git rebase --continue # If conflicts occur during rebase, after resolving conflicts, you can use this command to proceed with the process.

##############################################################################
# Patching
##############################################################################
# Generate diff patch files (Git can recognize diff files)
git <branch> log -n -p > diff.patch # Generate diff information for the past n commits of a specific branch into a single diff file
git diff <--cached> diff.patch # Generate a diff file for the current cache area content

# Applying patches using apply
git apply --check diff.patch # Check if the patch can be applied successfully; no output means no conflicts
git apply --stat diff.patch # View the file changes after applying the diff file
git apply diff.patch # Apply the patch, only changes file information, no commit information; you still need to add and commit

# Generating patches using --format-patch, including commit information
git format-patch <branch> -n  # Generate patches for the last n commits on the <branch>
git format-patch <r1>..<r2>   # Generate patches for modifications between two commits (including both <r1> and <r2>; both are specific commit IDs)
git format-patch -1 <r1>      # Generate a patch for a single commit
git format-patch <r1>         # Generate patches for modifications since a specific commit (excluding that commit)
git format-patch --root <r1>  # Generate all patches from the root to the commit <r1>

# Applying patches using am
git apply --check 0001-update-bash.sh.patch # Check if the patch conflicts are resolved
git apply --stat 0001-update-bash.sh.patch  # Check the file changes in the patch; no output means no conflicts
git am 0001-update-bash.sh.patch # Apply this patch to the current branch, including commit information
git am ./*.patch # Apply all patches in the current directory in sequential order
git am --abort # Terminate the entire patching process, similar to rebase --abort
git am --resolved # After resolving conflicts, you can use this command to continue with the patches, similar to rebase --continue

##############################################################################

##############################################################################
# bundle(打包)
##############################################################################
# 该命令会将git工程打包, 默认情况下会打包所有commit记录和track的文件
# 不同于简单粗暴tar.gz打包整个文件夹, bundle只打包那些push过的记录
# 如某git工程下存在.build构建后的目录, 而.gitignore又忽略了该文件夹
# 如果利用tar.gz打包则会将那些忽略的文件文件夹一并打包, 可能会造成压缩包极大的臃肿
# 而又不想仅仅为了打个包就删除整个build目录(如重新build时间成本太大)
# 那么就可以使用bundle进行打包, 该命令只打包track过的文件
# 并且像url那样直接调用git clone来重建
git bundle create awesome-cheatsheets.bundle HEAD master #打包重建master分支的所有数据
git clone awesome-cheatsheets.bundle # 重建工程

# bundle也可以打包指定的区间, 至于提交区间有多种表示方式
git bundle create awesome-cheatsheets.bundle HEAD~10
git bundle create awesome-cheatsheets.bundle HEAD~10..HEAD
git bundle create awesome-cheatsheets.bundle lhs_commit_md5..rhs_commit_md5
git bundle create awesome-cheatsheets.bundle origin/master..master
git bundle create awesome-cheatsheets.bundle master ^origin/master


##############################################################################
# 使用GitHub
##############################################################################
fork --> clone --> add/commit/push --> pull request


##############################################################################
# 其他配置
##############################################################################
git config --global color.ui true    显示颜色


##############################################################################
# 配置.gitignore文件
##############################################################################
/<dir name>/                    忽略文件夹
*.zip                           忽略.zip文件
/<dir name>/<file name>         忽略指定文件


##############################################################################
# 文件.gitignore生效后
##############################################################################
git add -f <file>               强制添加
git check-ignore -v <file>      查看生效规则


##############################################################################
# 配置别名
##############################################################################
git config [--global] alias.<alias> '<original command>'    为所有工作区/当前工作区配置别名
.git/config             当前工作区的配置文件
~/.gitconfig            当前用户的配置文件


##############################################################################
# References
##############################################################################
https://www.liaoxuefeng.com/wiki/896043488029600
https://git-scm.com/book/en/v2

##############################################################################
# 子模块
##############################################################################
git submodule foreach git pull    子模块更新

